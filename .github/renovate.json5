{
  // General RenovateBot configuration
  "extends": [
    ":enableRenovate",
    ":dependencyDashboard",
    ":semanticCommits",
    "config:base",
    "docker:enableMajor",
    "github>bjw-s/k8s-gitops//.github/renovate/labels-patchlevel",
    "github>bjw-s/k8s-gitops//.github/renovate/labels-types",
  ],
  "timezone": "Europe/Amsterdam",
  "dependencyDashboardTitle": "Renovate Dashboard",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  // Set up Renovate private modules
  "hostRules": [
    {
      "hostType": "docker",
      "matchHost": "ghcr.io",
      "encrypted": {
        "username": "HZEdibRidGWQ8CQ2EGdGEVXMXaBE7o0FUweuspAKfz4zai6LOFVufH0cy2h1fYg6HMLCRO4WBtZ4AJbihTvu+YdniWaNKzLpcY5U+r3oTieO1LS0DrPxwMyM/AYQN8ql5KuQhNc846gFkQjof+Q+76mg+6rxVyRbHaPZTzoCcG/RytestfOS/GSfTcZ7EbLII3xXBl68cPdgGnQEQXIo58shQErFhBZuF7L50EQCvj7vYkj8ZkcD+pMjJ9r+z/HW1DdnDyQ+o7zz/MGwjle4Vy8QH2vSelr6U5+XkpB2/zymNlNMeDx1TE1k2mCAnkUDszUQMpT/f7uoyL73r2fRlg==",
        "password": "aJeCGj365T2g+L9hwUZLoXtdseX4Hks86b6gBCQoUM/pXO8+JNDTYKh61IIdyrh1n3iJcYNNXO0L/f56RjL52Q3yFS9J6KxgNOeJ8HccZhwmMryZZmAMIBm2N5AiZ6EK3sL0lqIjoa2h/U3akhZmHhT8nRD0/LWT9JGMSr39UWcRpyJuIBqDNwOSemSPOUVdMYKeKPU/T0mQKY0b0EtAkA1RSt84aiZbf8KyghKM4MnQRrSrsXCpgUDiIgLi00CP0oJIcCGTmfdTPr9CercD1n0TBBySaZs7QuElvUCz0XPZ5IuwSfukZDm1/1kttDkGiticwhTD96Sa3hnzcdfqEQ=="
      }
    }
  ],
  // Set up Renovate Managers
  "helmv3": {
    "fileMatch": ["charts/.+/Chart\\.yaml$"]
  },
  "helm-values": {
    "fileMatch": [
      "cluster/.+/helmrelease\\.yaml$"
    ]
  },
  "kubernetes": {
    "fileMatch": [
      "cluster/.+\\.yaml$"
    ],
    "ignorePaths": [
      "cluster/base/"
    ],
  },
  "regexManagers": [
    // regexManager to read and process HelmRelease files
    {
      "fileMatch": [
        "cluster/.+\\.yaml$"
      ],
      "matchStrings": [
        // helm releases
        "registryUrl=(?<registryUrl>.*?)\n *chart: (?<depName>.*?)\n *version: (?<currentValue>.*)\n",
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process cert-manager CRD's
    {
      "fileMatch": [
        "cluster/crds/cert-manager/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n.*\\/(?<currentValue>.*?)\\/",
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process kube-prometheus-stack CRD's
    {
      "fileMatch": [
        "cluster/crds/kube-prometheus-stack/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?)\n *tag: (?<depName>[a-zA-Z-]+)-(?<currentValue>.*)\n",
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Traefik CRD's
    {
      "fileMatch": [
        "cluster/crds/traefik/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: v(?<currentValue>.*)\n",
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Rook-Ceph CRD's
    {
      "fileMatch": [
        "cluster/crds/rook-ceph/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: (?<currentValue>.*)\n",
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process github-actions-runner runner images
    {
      "fileMatch": [
        "cluster/apps/selfhosted/github-actions-runner/.+\\.yaml$"
      ],
      "matchStrings": [
        "image: (?<depName>.*?):(?<currentValue>.*?)\n"
      ],
      "datasourceTemplate": "docker"
    }
  ],
  "packageRules": [
    // Setup datasources
    {
      "matchDatasources": ["helm"],
      "semanticCommitScope": "charts",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "to {{{newValue}}}",
      "separateMinorPatch": true,
      "ignoreDeprecated": true
    },
    {
      "matchDatasources": ["docker"],
      "semanticCommitScope": "images",
      "commitMessageTopic": "{{depName}}",
      "commitMessageExtra": "to {{{newValue}}}",
      "separateMinorPatch": true
    },
    // Add labels according to package and update types
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(images)!: ",
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(charts)!: ",
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
    },
    // Custom version schemes
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["blakeblackshear/frigate"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$"
    },
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["xirixiz/dsmr-reader-docker"],
      "versioning": "regex:^latest-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$"
    },
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["minio/minio"],
      "versioning": "regex:^RELEASE\\.(?<major>\\d{4})-(?<minor>\\d{2})-(?<patch>\\d{2})"
    },
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["hotio/readarr"],
      "versioning": "regex:^nightly-0\\.(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$"
    },
    // Pin package versions
    // Octoprint has some weird published versions, try to ignore these
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["octoprint/octoprint"],
      "allowedVersions": "<2.0"
    },
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": ["influxdb"],
      "allowedVersions": "<2"
    },
    // Version strategies
    {
      "matchDatasources": ["docker"],
      "matchPackageNames": [
        "ghcr.io/k8s-at-home/plex"
      ],
      "versioning": "loose"
    },
    // Group packages
    {
      "matchDatasources": ["helm", "docker"],
      "matchPackagePatterns": ["^rook.ceph"],
      "groupName": "rook-ceph-suite",
      "additionalBranchPrefix": "",
      "separateMinorPatch": true,
    },
    {
      "matchPackageNames": [
        "rancher/system-upgrade-controller"
      ],
      "groupName": "rancher/system-upgrade-controller",
      "additionalBranchPrefix": "",
      "separateMinorPatch": true,
    },
    // Enable auto-merge for docker images
    {
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "requiredStatusChecks": null,
      "matchUpdateTypes": ["minor", "patch"],
      "matchPackageNames": [
        "ghcr.io/k8s-at-home/jackett",
        "ghcr.io/k8s-at-home/lidarr",
        "ghcr.io/k8s-at-home/plex",
        "ghcr.io/k8s-at-home/prowlarr",
        "ghcr.io/k8s-at-home/radarr",
        "ghcr.io/k8s-at-home/sonarr",
        "hotio/readarr"
      ]
    }
  ]
}
