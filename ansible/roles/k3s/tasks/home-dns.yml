---
- name: home-dns | Fetch service account
  run_once: true
  ansible.builtin.set_fact:
    DNSServiceAccountRaw: "{{ lookup('community.kubernetes.k8s', namespace='kube-system', kind='ServiceAccount', resource_name='home-dns') }}"

- name: home-dns | Exact service account token from service account
  run_once: true
  ansible.builtin.set_fact:
    DNSServiceAccountToken: "{{ DNSServiceAccountRaw | json_query('secrets[*].name | [0]') }}"

- name: home-dns | Fetch CA
  run_once: true
  ansible.builtin.set_fact:
    DNSCertificateAuthorityRaw: "{{ lookup('community.kubernetes.k8s', namespace='kube-system', kind='Secret', resource_name=DNSServiceAccountToken) }}"

- name: home-dns | Exact CA Cert
  run_once: true
  ansible.builtin.set_fact:
    DNSCertificateAuthority: "{{ DNSCertificateAuthorityRaw | json_query('data.\"ca.crt\"') }}"

- name: home-dns | Exact CA Token
  run_once: true
  ansible.builtin.set_fact:
    DNSCertificateAuthorityToken: "{{ DNSCertificateAuthorityRaw | json_query('data.token') | b64decode }}"

- name: home-dns | Create kubeconfig
  run_once: true
  ansible.builtin.copy:
    dest: "/tmp/kubeconfig-homedns"
    content: |
      ---
      apiVersion: v1
      kind: Config
      clusters:
      - name: default
        cluster:
          certificate-authority-data: {{ DNSCertificateAuthority }}
          server: https://{{ k3s_registration_address }}:6443
      contexts:
      - name: home-dns@default
        context:
          cluster: default
          namespace: kube-system
          user: home-dns
      users:
      - name: home-dns
        user:
          token: {{ DNSCertificateAuthorityToken }}
      current-context: home-dns@default

- name: home-dns | Copy config file to /tmp
  run_once: true
  ansible.builtin.fetch:
    src: "/tmp/kubeconfig-homedns"
    dest: "/tmp/kubeconfig-homedns"
    flat: true
