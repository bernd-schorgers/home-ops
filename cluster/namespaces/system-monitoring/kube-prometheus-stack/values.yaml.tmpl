---
server:
  resources:
    requests:
      memory: 1000Mi
      cpu: 25m
    limits:
      memory: 2000Mi

prometheusOperator:
  createCustomResource: false

alertmanager:
  config:
    global:
      resolve_timeout: 5m

    route:
      group_by: ['alertname', 'job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 6h
      receiver: 'null'
      routes:
      - receiver: 'null'
        match:
          alertname: Watchdog

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'namespace']

    receivers:
    - name: 'null'

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: internal
      cert-manager.io/cluster-issuer: letsencrypt-production
      external-dns.alpha.kubernetes.io/target: cname--int.{{ index (datasource "cluster-vars").domains 0 }}
    hosts:
    - alertmanager.{{ index (datasource "cluster-vars").domains 0 }}
    tls:
    - secretName: tls.alertmanager
      hosts:
      - alertmanager.{{ index (datasource "cluster-vars").domains 0 }}

  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "rook-ceph-block"
          resources:
            requests:
              storage: 10Gi

grafana:
  enabled: false

nodeExporter:
  serviceMonitor:
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      targetLabel: nodename
      targetLabel: instance
      action: replace

kubeEtcd:
  enabled: false

kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

prometheus-node-exporter:
  tolerations:
  - key: "node-role.kubernetes.io/arm-worker"
    operator: "Exists"
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"

prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: internal
      cert-manager.io/cluster-issuer: letsencrypt-production
      external-dns.alpha.kubernetes.io/target: cname--int.{{ index (datasource "cluster-vars").domains 0 }}
    hosts:
    - prometheus.{{ index (datasource "cluster-vars").domains 0 }}
    tls:
    - secretName: tls.prometheus
      hosts:
      - prometheus.{{ index (datasource "cluster-vars").domains 0 }}

  prometheusSpec:
    retention: 4h

    ruleSelector: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false

    thanos:
      image: raspbernetes/thanos:v0.17.1
      version: v0.17.1
      # Thanos chart will generate the secret: thanos
      objectStorageConfig:
        name: thanos
        key: object-store.yaml
      resources:
        requests:
          memory: 128Mi
          cpu: 100m
        limits:
          memory: 256Mi

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "rook-ceph-block"
          resources:
            requests:
              storage: 10Gi

    additionalScrapeConfigs: []
