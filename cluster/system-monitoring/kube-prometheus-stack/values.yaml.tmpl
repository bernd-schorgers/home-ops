---
server:
  resources:
    requests:
      memory: 1000Mi
      cpu: 25m
    limits:
      memory: 2000Mi

prometheusOperator:
  createCustomResource: false

alertmanager:
  config:
    global:
      resolve_timeout: 5m

    route:
      group_by: ['alertname', 'job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 6h
      receiver: 'null'
      routes:
      - receiver: 'null'
        match:
          alertname: Watchdog

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'namespace']

    receivers:
    - name: 'null'

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: bjws-lan-ca-issuer
    hosts:
    - "alertmanager.{{ (datasource "cluster-vars").domain.internal }}"
    tls:
    - secretName: tls.alertmanager
      hosts:
      - "alertmanager.{{ (datasource "cluster-vars").domain.internal }}"

  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "rook-ceph-block"
          resources:
            requests:
              storage: 10Gi

grafana:
  image:
    repository: grafana/grafana
    tag: 7.3.4

  deploymentStrategy:
    type: Recreate

  persistence:
    enabled: false
    storageClassName: "rook-ceph-block"
    size: 10Gi
    accessModes:
    - ReadWriteOnce

  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: bjws-lan-ca-issuer
    hosts:
    - "grafana.{{ (datasource "cluster-vars").domain.internal }}"
    tls:
    - secretName: tls.grafana
      hosts:
      - "grafana.{{ (datasource "cluster-vars").domain.internal }}"

  env:
    GF_EXPLORE_ENABLED: true
    GF_PANELS_DISABLE_SANITIZE_HTML: true
    GF_LOG_FILTERS: rendering:debug

  adminPassword: "{{ (datasource "kube-prometheus-stack").grafana.admin.password }}"

  sidecar:
    datasources:
      enabled: true
      # Disable for thanos
      defaultDatasourceEnabled: true
    dashboards:
      enabled: true
      searchNamespace: ALL

  plugins:
  - natel-discrete-panel
  - pr0ps-trackmap-panel
  - grafana-piechart-panel
  - vonage-status-panel
  - grafana-worldmap-panel
  - grafana-clock-panel

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        allowUiUpdates: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

  dashboards:
    default:
      ceph-cluster:
        url: https://grafana.com/api/dashboards/2842/revisions/11/download
        datasource: Prometheus
      ceph-osd:
        url: https://grafana.com/api/dashboards/5336/revisions/3/download
        datasource: Prometheus
      ceph-pools:
        url: https://grafana.com/api/dashboards/5342/revisions/3/download
        datasource: Prometheus
      vernemq:
        url: https://raw.githubusercontent.com/vernemq/vernemq/master/metrics_scripts/grafana/VerneMQ%20Node%20Metrics.json
        datasource: Prometheus
      nginx-dashboard:
        url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
        datasource: Prometheus
      # Ref: https://grafana.com/grafana/dashboards/12833
      version-checker:
        gnetId: 12833
        revision: 1
        datasource: Prometheus

  additionalDataSources: []
  # - name: Prometheus
  #   type: prometheus
  #   access: proxy
  #   url: http://thanos-query-http:10902/
  #   isDefault: true
  # - name: Loki
  #   type: loki
  #   access: proxy
  #   url: http://loki:3100

  grafana.ini:
    server:
      root_url: "https://grafana.{{ (datasource "cluster-vars").domain.internal }}"
    paths:
      data: /var/lib/grafana/data
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net

nodeExporter:
  serviceMonitor:
    relabelings:
    - action: replace
      regex: (.*)
      replacement: $1
      sourceLabels:
      - __meta_kubernetes_pod_node_name
      targetLabel: kubernetes_node

kubeEtcd:
  enabled: false

kubeControllerManager:
  enabled: false
  endpoints:
  - 192.168.42.100

kubeScheduler:
  enabled: false
  endpoints:
  - 192.168.42.100

kubeProxy:
  enabled: false

kubelet:
  serviceMonitor:
    metricRelabelings:
    - action: replace
      sourceLabels:
      - node
      targetLabel: instance

prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: bjws-lan-ca-issuer
    hosts:
    - "prometheus.{{ (datasource "cluster-vars").domain.internal }}"
    tls:
    - secretName: tls.prometheus
      hosts:
      - "prometheus.{{ (datasource "cluster-vars").domain.internal }}"

  prometheusSpec:
    replicas: 2
    replicaExternalLabelName: "replica"
    podAntiAffinity: "hard"
    ruleSelector: {}
    ruleNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    retention: 24h
    enableAdminAPI: true
    walCompression: true

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "rook-ceph-block"
          resources:
            requests:
              storage: 10Gi

    additionalScrapeConfigs: []
